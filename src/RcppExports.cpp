// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// fit_latent_space_network
Rcpp::List fit_latent_space_network(const arma::cube& Y, const int num_dimensions, const int num_iter, const int num_burn_in, const unsigned int seed);
RcppExport SEXP _lsmdn_fit_latent_space_network(SEXP YSEXP, SEXP num_dimensionsSEXP, SEXP num_iterSEXP, SEXP num_burn_inSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const int >::type num_dimensions(num_dimensionsSEXP);
    Rcpp::traits::input_parameter< const int >::type num_iter(num_iterSEXP);
    Rcpp::traits::input_parameter< const int >::type num_burn_in(num_burn_inSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(fit_latent_space_network(Y, num_dimensions, num_iter, num_burn_in, seed));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_lsmdn_fit_latent_space_network", (DL_FUNC) &_lsmdn_fit_latent_space_network, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_lsmdn(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
